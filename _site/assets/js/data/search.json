[
  
  {
    "title": "Transloc",
    "url": "/posts/c1-bus/",
    "categories": "projects, engineering",
    "tags": "webscraping, apis, duke",
    "date": "2023-01-03 16:00:00 +0000",
    





    
    "snippet": "  TL;DR:  I built a device that displays the bus schedule for the bus that runs between the two halves of Duke’s campus.Duke is split into two halves, East Campus and West Campus. East houses the f...",
    "content": "  TL;DR:  I built a device that displays the bus schedule for the bus that runs between the two halves of Duke’s campus.Duke is split into two halves, East Campus and West Campus. East houses the freshman undergraduate population and a few classes (mostly humanities) while the rest of the university is on West. There’s a bus line called the C-1 that runs between the two campuses. Buses run anywhere from every few minutes at peak hours to roughly every 20 minutes late at night.Because the bus line is run by Duke, they’ve integrated this system called “Transloc” into their busing system. It’s essentially a bus tracker–it allows you to see where all the buses are in real-time and it provides estimates as to when each bus will arrive at their stops. I know a few other universities also have Transloc, or something similar.To its credit, Transloc is a fairly good product. There’s a mobile app that doesn’t have an ugly UI, and the information it displays is accurate. My main gripe with it is that the app can be slow at times. When I’m in my room on East Campus and I need to know exactly how long I have until the last bus I can take that will get me to class on time arrives, I can’t be sitting around waiting a full 5 seconds until the app loads before taking a couple of seconds to navigate to the C-1 bus information. Too slow.In NYC, every bus stop is equipped with a small screen that displays time estimates for the next few buses in real-time. I wanted one of those in my room. So, with the extra time I had at the end of the semester, I started work on building a small device that could display time estimates for the C-1 bus.Part One: WebscrapingProof of Concept in PythonI’ve been familiar with the concept of webscraping before coming to Duke, but I’ve never tried webscraping myself. I thought that this would be a good first project for webscraping because Transloc also has a website, so I decided to give it a try. I figured that given its extensive packages, Python would be the easiest language to scrape with so I first used Python to ensure that webscraping was the right tool for this project. It didn’t take long before I was able to retrieve the page HTML:import requestsURL = \"https://duke.transloc.com/t/stops/4117202\"page = requests.get(URL)print(page.text)The information that was returned provided time estimates for the next two buses for the stop on East Campus, which was exactly what I was looking for. With that in mind, I started work on figuring out how I could webscrape on a microcontroller.Webscraping on a MicrocontrollerThe two microcontrollers I had access to were the ESP-8266 and the ESP-32. The ESP-32 is the newer and more powerful of the two, so I went with that.Here was the plan:  Connect to Duke’s Wi-Fi network  Send a GET request to the Transloc website  Parse the HTML payload to extract the time estimates  Display the time estimates on a screenI was mainly concerned with the first two steps, given that I had no experience with either of them. After a few hours of examining examples and tutorials, I was able to put together this code:#include &lt;WiFi.h&gt;#include &lt;WiFiClient.h&gt;#define WIFI_SSID \"DukeVisitor\"#define WIFI_PASSWORD NULL#define HOST_WEBSITE \"https://duke.transloc.com/t/stops/4117202\"void setup() {    Serial.begin(115200);    // connect MCU to DukeVisitor Wi-Fi    WiFi.mode(WIFI_STA);    WiFi.begin(WIFI_SSID, WIFI_PASSWORD);    // setup tcp connection     WiFiClient client;    client.print(F(\"GET \"));    client.print(\"/\");    client.println(F(\" HTTP/1.1\"));    // request specific website    client.print(F(\"Host: \"));    client.println(HOST_WEBSITE);    client.println(F(\"Cache-Control: no-cache\"));}Theoretically, at the end of setup, client should have contained the HTML of the website. The plan was to then extract the time estimates by parsing the payload. However, the code threw Error 302, a redirection error.Theoretically, this should’ve accomplished steps 1 and 2, but instead, I was met with a redirection error (Error 302). I had no clue what that really meant, given that I’m not familiar with the HTTP protocol. I tried to look up what the error meant, but I couldn’t find anything other than the fact that the URL I was trying to access was moved.I talked with my TA from my Introduction to Engineering (EGR 101) class, and he told me that the problem was that I was trying to access a website over HTTP, but the website was actually using HTTPS. With a bit of research, I found that I could simple line of code to fix the problem: client.setInsecure();. However, the ESP-32 Wi-Fi client doesn’t support this function, so I switched to the ESP-8266 and included WiFiClientSecure instead of WiFiClient. This fixed the problem, and I was able to successfully retrieve the HTML payload.Parsing the HTMLNow that I had the HTML payload, all I had to do was extract the time estimates. I employed the same strategy I used in my Python proof of concept by searching for the table element that had the class wait_time time_1. However, I quickly realized that the payload that I was receiving was different from the one I received in Python. In fact, the payload I received didn’t even contain the bus information–the wait_time field was empty.I’m still not exactly sure why this is true, but I hypothesize that because the website was using JavaScript to dynamically generate the HTML, the HTML I was receiving was not the same HTML that was being displayed on the website. This hypothesis doesn’t make much sense to me, given that I was able to retrieve the HTML payload in Python, but I’m not sure what else could be causing the problem.I decided to look for a different way to retrieve the bus information.Part Two: Transloc APIFrom the start of the project, I knew that using an API was probably the best idea for this project for a few reasons:  Parsing a massive HTML payload would be both slow and annoying to code  The payload returned by an API would be significantly smaller, which is important given that the microcontrollers I’m using have limited memory  I wouldn’t have to worry about the website changing its HTML structure if the website were to updateI looked at the Transloc API documentation and realized that I would need to request access to the API from Duke."
  },
  
  {
    "title": "Min-Maxing Life",
    "url": "/posts/min-maxing-life/",
    "categories": "non-cs, thoughts",
    "tags": "social, games",
    "date": "2022-12-22 09:55:00 +0000",
    





    
    "snippet": "  TL;DR:  Optimizing for the development of desirable skills is a prevalent concept in games, but it also has real-life parallels. Although there are caveats to the analogy, this idea of “min-maxin...",
    "content": "  TL;DR:  Optimizing for the development of desirable skills is a prevalent concept in games, but it also has real-life parallels. Although there are caveats to the analogy, this idea of “min-maxing” has implications in both social and professional aspects of life.What is Min-Maxing?A few days ago, my friend, Arvindh and I were discussing the ideal ratio of social skills and intellect that a person should possess. Although our conversation was relatively short-lasted, it provoked quite a few thoughts. Would it be better to be more social or intelligent? Would a 50/50 split be optimal? It’s interesting to think about.There’s this idea in video games that strongly correlates to this:  Min-maxing (noun)  The character-building strategy of maximizing a specific desirable ability, skill, or other power of a character at the expense of less desirable traitsIn many games, you’re given a finite number of “skill points” that you’re allowed to assign towards a variety of statistics (stats, for short)–strength, defense, charisma, and intelligence, to name a few. If you want your character to be a fighter, it would make sense to allocate the majority of your points to strength and defense. However, a wizard may find the intelligence stat preferable. The assignment of these points is referred to as:  Specing (verb)  The expenditure of resources to gain abilities or advantagesStats in MinecraftThe concept of min-maxing is something that frequently applies to real-life.Consider the activities that you partake in each day. Maybe you like playing an instrument, so you set aside an hour each day to practice. Maybe you’re trying to eat healthier, so you choose to cook your own meals instead of eating out. Maybe you go to the gym because you enjoy the physical and mental health benefits. The hundreds of actions that we take are conscious decisions of how we choose to spend our time. You can think of the time we spend on these actions as investments towards specific stats. For instance, practicing an instrument could improve your intelligence or charisma stats.In real life, spending time on an activity is analagous to specing into a statMin-Maxing in Real Life vs. in Video GamesThere are a few key differences between min-maxing in real life and min-maxing in video games:            There are way more than the several stats that exist in games      The infinite number of activities that we can pursue in real life means that there are infinitely many unique stats that we can spec into. Plus, there are nuances to each of the stats. Intelligence could be broken down into many different subdivisions: logical-mathematical intelligence, spatial intelligence, musical intelligence, etc. There are even stats that blur the lines between simple, more fundamental stats (e.g. social intelligence). Qualifying what you are specing into in real life is not as simple as it is in a game.                  Some people may be naturally better/more inclined to develop a specific stat than others      The environment that you are born into heavily dictates what stats you value. For instance, if you’re born into an economically disadvantaged family, you may be more inclined to spec into intelligence because pursuing higher-level education generally correlates to higher income. However, if you’re born into a wealthy family, you may be able to allocate more time into specing into charisma because connections and influence over others is a versatile skill that can be applied to many different situations.                  Progress towards the development of a stat is not guaranteed      When you start an activity in a game, tools like experience bars make it apparent as to how much progress you’ve made towards a set goal. In real life, however, you could spend countless hours working on an issue that never gets resolved or sink years into a fruitless career that never takes off. Factors outside of your control often make it difficult to determine the payoff of an action. You just have to have trust in your actions and hope that the results are actually what you expect.                  Decision calculations are skewed by hedonistic desires      Games are crafted to ensure that developing skills is fun. However, this is often false in real life. Usually, the most desirable traits are the ones that are the most difficult to develop. Subsequently, we may be more inclined to spec into less desirable and easier-to-develop stats. For instance, even if you know that you’ll be happier in the long run if you spend time studying for an exam (investing in intelligence), you may not be able to resist the urge to practice a hobby or go out with friends. Because most of us live our lives greedily, optimizing for total happiness over the forseeable future, the time investments (specing choices) we make are often based on our current desires and expectations, which may not always be in our best interest.      Relevant ChartWith the limitations1 of min-maxing in real life in mind, we can move on to talk about the interesting implications of it in real life.The Relevance of Stats &amp; Min-MaxingSociallySince coming to college, I’ve been paying close attention to the composition of successful social groups and I’ve noticed that there exists a strong correlation between what stats people spec into and the social groups that they belong to. Archetypes like the “CS nerd” or the “jock” are not just stereotypes–they hint towards the stat breakdown of an individual. These stat preferences serve as a valuable heuristic for determining whether or not you’ll be compatible with a person because people with similar stat breakdowns likely have similar values and interests.Subconsciously, when we befriend others, there’s this whole process of analyzing stats to evaluate compatibility. The stats that they spec into give us an idea of who they are and what they value. From our formed perception of them, we are then able to make the informed decision of whether or not we “click” with them.This leads to an interesting point: the stats that others may seem to have are not necessarily a reflection of their true self. They’re more of a reflection of the person that they aim to be. Conversely, the stats that you may think you have are not necessarily the same stats that others perceive you to have. For instance, you may think of yourself as a social butterfly, but if you’re not good at interacting with others, or other people see you as awkward, you may not be as socially adept as you think you are. It doesn’t matter what you think you are–it matters what others think you are because they are the ones that can dictate your life trajectory (e.g. your employer, your friends, your significant other, etc.).Take a moment to think about the stats that you spec into. Think about the actions that you take each day and the time that you spend on them. Now, think about how others would describe you. Does their description reflect the stats that you spec into? My hypothesis is that the closer the two descriptions are, the more likely you are to be successful, whether that be your in career or your social life.ProfessionallyI argue that specing into a single stat has a non-linear reward curve.For one, once you become proficient at a certain stat, you can leverage that skill to more easily spec into adjacent stats. For instance, if you’re an excellent public speaker, you can use that skill to spec into charisma. If you’re a good athlete, you’re more likely to have an easier time interacting with others and can use that skill to spec into interpersonal stats.In terms of your career, as you spend more time specializing in a certain stat, it is exponentially more likely that you will be successful in that field. Below is what I believe to be a reasonable representation of the reward curve for specing into a stat in terms of being desirable to an employer.Time vs. DesirabilityThe left third of the graph is probably the most intuitive. Gaining a basic level of a stat is easy and has a sizeable payoff because you will immediately be better than the average person. The middle third of the graph is where things get interesting: your desirablity plateaus. Why? At that point, your skill level matches the needs of most jobs–you’re considered a professional, but lack the expertise to be considered an expert. In other words, you can do your job well, but your job doesn’t make use of your additional skills so they’re not really applicable. The right third of the graph is where the payoff is the greatest. At this point, you’re an expert in your field and are able to leverage your expertise to acquire a special job that makes use of your rarer skills.Income distributions seem to support this idea. Below is a graph that demonstrates the plateau effect on the income (and subsequently desirability, due to supply and demand) of software developers in industry. The plateau is where the red line is.Software Developer Income PlateauAnd here’s a graph that demonstrates the same effect for physicians with the plateau shifted more to the right (plateau occurs around the 380k-420k range).2Physician Income PlateauI’m sure that there are many more fields out there that reflect this trend.ConclusionThis past year, I’ve been getting into self-help books and one of the most insightful pieces of advice that I’ve come upon is that it’s important to identify your core values so that you can more easily evaluate whether an action will work towards your “life goals.” This essentially boils down to knowing what stats you want to spec into, so that you can more easily evaluate whether an action will work towards your overall goals.Is the idea of min-maxing life something revolutionary? Not really. Will I be changing the way I spend my time because of it? Probably not. I know that many of the things that I’ve said in this post are a bit abstract, but I think that the idea of min-maxing in real life is a unique way to think about how we spend our time. It’s a fun way to quantify the value of our actions and to make slightly more informed decisions about how we spend our time.            Okay, I’ll admit that there’s a lot of issues with getting specific about how min-maxing translates into real-life. How can one even quantify stats? What does 20 points into intelligence mean as opposed to 50? Real-life poses a mess of abstractions so bringing this idea to levels of granularity gets super confusing. &#8617;              This is under the assumption that specializations that pay more require more skill. This isn’t necessarily true, but following the law of supply and demand, this assumption does have some merit (jobs that are easy are more easily filled so the demand and subsequently pay should fall). &#8617;      "
  }
  
]

